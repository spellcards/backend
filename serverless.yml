service: spellcards
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  profile: serverlessUser
  stage: dev
  region: ap-southeast-2

functions:
  preSignUp:
    handler: lambdas/preSignUp.handler
    events:
      - cognitoUserPool:
          pool: MyUserPool
          trigger: PreSignUp
  getUserAssignments:
    handler: lambdas/getUserAssignments.handler
    events:
      - http:
          path: getUserAssignments/{student_id}
          method: GET
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: apiAuthorizer

resources:
  Resources:
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: spellcards-userpool-dev
        AutoVerifiedAttributes:
          - email
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
          ClientName: L7-userpool-dev-client
          UserPoolId:
            Ref: CognitoUserPool
          ExplicitAuthFlows:
            - ADMIN_NO_SRP_AUTH
          GenerateSecret: false
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    apiAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties: 
        IdentitySource: method.request.header.authorization
        Name: PricerAuthorizer
        ProviderARNs: 
          - Fn::GetAtt:
            - CognitoUserPool
            - Arn
        RestApiId:     
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS